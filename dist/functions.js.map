{"version":3,"file":"functions.js","sourceRoot":"","sources":["../functions.ts"],"names":[],"mappings":"AAmGC,CAAC;AAUD,CAAC;AAQD,CAAC;AAQD,CAAC;AAQD,CAAC;AAUD,CAAC;AAUD,CAAC;AAWD,CAAC;AAYD,CAAC;AAsBD,CAAC;AAWD,CAAC;AAUD,CAAC;AAWD,CAAC;AAUD,CAAC;AAWD,CAAC;AAUD,CAAC;AAWD,CAAC;AAWD,CAAC;AAWD,CAAC;AASD,CAAC;AAWD,CAAC;AAWD,CAAC;AAUD,CAAC;AAWD,CAAC;AAUD,CAAC;AAQD,CAAC;AAQD,CAAC;AAWD,CAAC;AAQD,CAAC;AAcD,CAAC;AAWD,CAAC;AAOD,CAAC;AAWD,CAAC;AAWD,CAAC;AAOD,CAAC;AAYD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAqBD,CAAC;AAcD,CAAC;AAUD,CAAC;AAQD,CAAC;AAWD,CAAC;AAWD,CAAC;AAWD,CAAC;AAYD,CAAC;AAYD,CAAC;AAUD,CAAC;AAYD,CAAC;AAgBD,CAAC;AAWD,CAAC;AAUD,CAAC;AAcD,CAAC;AAYD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAWD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AA+BD,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport {\r\n  FunctionCall,\r\n  Expression,\r\n  PropertyType\r\n} from './style';\r\n\r\nexport type GeoStylerFunction = GeoStylerNumberFunction |\r\n  GeoStylerStringFunction |\r\n  GeoStylerBooleanFunction |\r\n  GeoStylerUnknownFunction;\r\n\r\n/**\r\n * An expression of a function that returns a number.\r\n */\r\nexport type GeoStylerNumberFunction = GeoStylerUnknownFunction |\r\nFabs |\r\nFacos |\r\nFadd |\r\nFasin |\r\nFatan |\r\nFatan2 |\r\nFceil |\r\nFcos |\r\nFdiv |\r\nFexp |\r\nFfloor |\r\nFinterpolate |\r\nFlog |\r\nFmax |\r\nFmin |\r\nFmodulo |\r\nFmul |\r\nFpi |\r\nFpow |\r\nFrandom |\r\nFrint |\r\nFround |\r\nFsin |\r\nFsqrt |\r\nFstrIndexOf |\r\nFstrLastIndexOf |\r\nFstrLength |\r\nFsub |\r\nFtan |\r\nFtoDegrees |\r\nFtoNumber |\r\nFtoRadians;\r\n\r\n/**\r\n * An expression of a function that returns a string.\r\n */\r\nexport type GeoStylerStringFunction = GeoStylerUnknownFunction |\r\nFnumberFormat |\r\nFstrAbbreviate |\r\nFstrCapitalize |\r\nFstrConcat |\r\nFstrDefaultIfBlank |\r\nFstrReplace |\r\nFstrStripAccents |\r\nFstrSubstring |\r\nFstrSubstringStart |\r\nFstrToLowerCase |\r\nFstrToUpperCase |\r\nFstrTrim |\r\nFtoString;\r\n\r\n/**\r\n * An expression of a function that returns a boolean.\r\n */\r\nexport type GeoStylerBooleanFunction = GeoStylerUnknownFunction |\r\nFall |\r\nFany |\r\nFbetween |\r\nFdouble2bool |\r\nFequalTo |\r\nFgreaterThan |\r\nFgreaterThanOrEqualTo |\r\nFin |\r\nFlessThan |\r\nFlessThanOrEqualTo |\r\nFnot |\r\nFnotEqualTo |\r\nFparseBoolean |\r\nFstrEndsWith |\r\nFstrEqualsIgnoreCase |\r\nFstrMatches |\r\nFstrStartsWith;\r\n\r\nexport type GeoStylerUnknownFunction = Fcase | Fstep | Fproperty;\r\n\r\n/**\r\n * The absolute value of the specified number value\r\n */\r\nexport interface Fabs extends FunctionCall<number> {\r\n  name: 'abs';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the arc cosine of an angle in radians, in the range of 0.0 through PI\r\n */\r\nexport interface Facos extends FunctionCall<number> {\r\n  name: 'acos';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the sum of the arguments\r\n */\r\nexport interface Fadd extends FunctionCall<number> {\r\n  name: 'add';\r\n  args: Expression<number>[];\r\n};\r\n\r\n/**\r\n * Resolves to true if all passed arguments resolve to true\r\n */\r\nexport interface Fall extends FunctionCall<boolean> {\r\n  name: 'all';\r\n  args: Expression<boolean>[];\r\n};\r\n\r\n/**\r\n * Resolves to true if any of the passed arguments resolves to true\r\n */\r\nexport interface Fany extends FunctionCall<boolean> {\r\n  name: 'any';\r\n  args: Expression<boolean>[];\r\n};\r\n\r\n/**\r\n * Returns the arc sine of an angle in radians, in the range of -PI / 2 through PI / 2\r\n */\r\nexport interface Fasin extends FunctionCall<number> {\r\n  name: 'asin';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the arc tangent of an angle in radians, in the range of -PI/2 through PI/2\r\n */\r\nexport interface Fatan extends FunctionCall<number> {\r\n  name: 'atan';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Converts a rectangular coordinate (x, y) to polar (r, theta) and returns theta.\r\n */\r\nexport interface Fatan2 extends FunctionCall<number> {\r\n  name: 'atan2';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if arg1 <= arg0 <= arg2\r\n */\r\nexport interface Fbetween extends FunctionCall<boolean> {\r\n  name: 'between';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\nexport type FCaseParameter = {\r\n  case: Expression<boolean>;\r\n  value: Expression<PropertyType>;\r\n};\r\n\r\n/**\r\n * Textual representation of a switch-case function.\r\n * argument[0] is the default value.\r\n * argument[1] - argument[args.length] are objects with 'case' and 'value'.\r\n *\r\n * The value of the first object where its 'case' Expression resolves to true\r\n * will be used.\r\n * If no 'case' expression resolves to true the default value will be returned.\r\n */\r\nexport interface Fcase extends FunctionCall<PropertyType> {\r\n  name: 'case';\r\n  args: [\r\n    Expression<PropertyType>,\r\n    ...FCaseParameter[]\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the smallest (closest to negative infinity) number value that is greater than or equal to\r\n * x and is equal to a mathematical integer.\r\n */\r\nexport interface Fceil extends FunctionCall<number> {\r\n  name: 'ceil';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the cosine of an angle expressed in radians\r\n */\r\nexport interface Fcos extends FunctionCall<number> {\r\n  name: 'cos';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the division of argument[0] by argument[1]\r\n */\r\nexport interface Fdiv extends FunctionCall<number> {\r\n  name: 'div';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if x is zero, false otherwise\r\n */\r\nexport interface Fdouble2bool extends FunctionCall<boolean> {\r\n  name: 'double2bool';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Resolves to true if both arguments are equal\r\n */\r\nexport interface FequalTo extends FunctionCall<boolean> {\r\n  name: 'equalTo';\r\n  args: [\r\n    Expression<PropertyType>,\r\n    Expression<PropertyType>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns Euler’s number e raised to the power of x\r\n */\r\nexport interface Fexp extends FunctionCall<number> {\r\n  name: 'exp';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the largest (closest to positive infinity) value that is less than or equal to x and is\r\n * equal to a mathematical integer\r\n */\r\nexport interface Ffloor extends FunctionCall<number> {\r\n  name: 'floor';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Resolves to true if argument[0] is greater than argument[1]\r\n */\r\nexport interface FgreaterThan extends FunctionCall<boolean> {\r\n  name: 'greaterThan';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Resolves to true if argument[0] is greater than or equal to argument[1]\r\n */\r\nexport interface FgreaterThanOrEqualTo extends FunctionCall<boolean> {\r\n  name: 'greaterThanOrEqualTo';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if arguments[0] is equal to one of the arguments[1], …, arguments[n] values. Use the\r\n * function name matching the number of arguments specified.\r\n */\r\nexport interface Fin extends FunctionCall<boolean> {\r\n  name: 'in';\r\n  args: Expression<string | number>[];\r\n};\r\n\r\n/**\r\n * Resolves to true if argument[0] is less than argument[1]\r\n */\r\nexport interface FlessThan extends FunctionCall<boolean> {\r\n  name: 'lessThan';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Resolves to true if argument[0] is less than or equal to argument[1]\r\n */\r\nexport interface FlessThanOrEqualTo extends FunctionCall<boolean> {\r\n  name: 'lessThanOrEqualTo';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Inverts the boolean value of argument[0]\r\n */\r\nexport interface Fnot extends FunctionCall<boolean> {\r\n  name: 'not';\r\n  args: [\r\n    Expression<boolean>\r\n  ];\r\n};\r\n\r\n/**\r\n * Resolves to false if both arguments are equal\r\n */\r\nexport interface FnotEqualTo extends FunctionCall<boolean> {\r\n  name: 'notEqualTo';\r\n  args: [\r\n    Expression<PropertyType>,\r\n    Expression<PropertyType>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the natural logarithm (base e) of x\r\n */\r\nexport interface Flog extends FunctionCall<number> {\r\n  name: 'log';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the maximum between argument[0], …, argument[n]\r\n */\r\nexport interface Fmax extends FunctionCall<number> {\r\n  name: 'max';\r\n  args: Expression<number>[];\r\n};\r\n\r\n/**\r\n * Returns the minimum between argument[0], …, argument[n]\r\n */\r\nexport interface Fmin extends FunctionCall<number> {\r\n  name: 'min';\r\n  args: Expression<number>[];\r\n};\r\n\r\n/**\r\n * Returns the remainder after integer division of argument[0] by argument[1]\r\n */\r\nexport interface Fmodulo extends FunctionCall<number> {\r\n  name: 'modulo';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the product of the arguments\r\n */\r\nexport interface Fmul extends FunctionCall<number> {\r\n  name: 'mul';\r\n  args: Expression<number>[];\r\n};\r\n\r\n/**\r\n * Formats the number (argument[1]) according to the specified format (arguments[0]) using the default locale\r\n * or the one provided (argument[2]) as an optional argument. The format syntax can be found\r\n * in the Java DecimalFormat javadocs\r\n */\r\nexport interface FnumberFormat extends FunctionCall<string> {\r\n  name: 'numberFormat';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<number>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Parses a string into a boolean. The empty string, f, 0.0 and 0 are considered false, everything\r\n * else is considered true.\r\n */\r\nexport interface FparseBoolean extends FunctionCall<boolean> {\r\n  name: 'parseBoolean';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns an approximation of pi, the ratio of the circumference of a circle to its diameter\r\n */\r\nexport interface Fpi extends Omit<FunctionCall<number>, 'args'> {\r\n  name: 'pi';\r\n};\r\n\r\n/**\r\n * Returns the value of base (argument[0]) raised to the power of exponent (arguments[1])\r\n */\r\nexport interface Fpow extends FunctionCall<number> {\r\n  name: 'pow';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the value of the property argument[0]. Allows property names to be compute\r\n * or specified by Variable substitution in SLD.\r\n */\r\nexport interface Fproperty extends FunctionCall<unknown> {\r\n  name: 'property';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns a Double value with a positive sign, greater than or equal to 0.0 and less than 1.0.\r\n */\r\nexport interface Frandom extends Omit<FunctionCall<number>, 'args'> {\r\n  name: 'random';\r\n};\r\n\r\n/**\r\n * Returns the Double value that is closest in value to the argument and is equal to a mathematical\r\n * integer. If two double values that are mathematical integers are equally close, the result is the\r\n * integer value that is even.\r\n */\r\nexport interface Frint extends FunctionCall<number> {\r\n  name: 'rint';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the closest number to argument[0].\r\n */\r\nexport interface Fround extends FunctionCall<number> {\r\n  name: 'round';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the sine of an angle expressed in radians\r\n */\r\nexport interface Fsin extends FunctionCall<number> {\r\n  name: 'sin';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the square root of argument[0]\r\n */\r\nexport interface Fsqrt extends FunctionCall<number> {\r\n  name: 'sqrt';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\nexport type FStepParameter = {\r\n  boundary: Expression<number>;\r\n  value: Expression<PropertyType>;\r\n};\r\n\r\n/**\r\n * Returns an unknown value depending on the passed in value of argument[0]. In\r\n * most cases this will be an {@link Fproperty}.\r\n * The argument[1] is the initial value.\r\n * All following arguments are an array of length 2 where the first element is\r\n * a numeric value and the second element is the value to return if the value is\r\n * larger than that boundry.\r\n */\r\nexport interface Fstep extends FunctionCall<unknown> {\r\n  name: 'step';\r\n  args: [\r\n    Expression<number>, Expression<PropertyType>,\r\n    ...FStepParameter[]\r\n  ];\r\n};\r\n\r\n/**\r\n * Abbreviates the sentence (argument[0]) at first space beyond lower (argument[1])\r\n * or at upper (argument[2]) if no space. Appends append (argument[3]) if string is abbreviated.\r\n */\r\nexport interface FstrAbbreviate extends FunctionCall<string> {\r\n  name: 'strAbbreviate';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<number>,\r\n    Expression<number>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Fully capitalizes the sentence. For example, “HoW aRe YOU?” will be turned into “How Are You?”\r\n */\r\nexport interface FstrCapitalize extends FunctionCall<string> {\r\n  name: 'strCapitalize';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Concatenates the two strings into one\r\n */\r\nexport interface FstrConcat extends FunctionCall<string> {\r\n  name: 'strConcat';\r\n  args: Expression<string>[];\r\n};\r\n\r\n/**\r\n * Returns default (argument[1]) if str (argument[0]) is empty, blank or null\r\n */\r\nexport interface FstrDefaultIfBlank extends FunctionCall<string> {\r\n  name: 'strDefaultIfBlank';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if string (argument[0]) ends with suffix (argument[1])\r\n  */\r\nexport interface FstrEndsWith extends FunctionCall<boolean> {\r\n  name: 'strEndsWith';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if the two strings are equal ignoring case considerations\r\n */\r\nexport interface FstrEqualsIgnoreCase extends FunctionCall<boolean> {\r\n  name: 'strEqualsIgnoreCase';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the index within this string (argument[0]) of the first occurrence of the specified\r\n * substring (argument[1]), or -1 if not found\r\n */\r\nexport interface FstrIndexOf extends FunctionCall<number> {\r\n  name: 'strIndexOf';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the index within this string (arguments[0]) of the last occurrence of the specified\r\n * substring (arguments[1]), or -1 if not found\r\n */\r\nexport interface FstrLastIndexOf extends FunctionCall<number> {\r\n  name: 'strLastIndexOf';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the string length\r\n */\r\nexport interface FstrLength extends FunctionCall<number>{\r\n  name: 'strLength';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if the string (arguments[0]) matches the specified regular expression (arguments[1]).\r\n * For the full syntax of the pattern specification see the Java Pattern class javadocs\r\n */\r\nexport interface FstrMatches extends FunctionCall<boolean> {\r\n  name: 'strMatches';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the string (argument[0]) with the pattern (argument[1]) replaced with the given\r\n * replacement (argument[2]) text. If the global argument (argument[3]) is true then all occurrences of the pattern\r\n * will be replaced, otherwise only the first. For the full syntax of the pattern specification see\r\n * the Java Pattern class javadocs\r\n */\r\nexport interface FstrReplace extends FunctionCall<string> {\r\n  name: 'strReplace';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>,\r\n    Expression<string>,\r\n    Expression<boolean>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns true if string (argument[0]) starts with prefix (argument[1]).\r\n */\r\nexport interface FstrStartsWith extends FunctionCall<boolean> {\r\n  name: 'strStartsWith';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Removes diacritics (~= accents) from a string. The case will not be altered.\r\n */\r\nexport interface FstrStripAccents extends FunctionCall<string> {\r\n  name: 'strStripAccents';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns a new string that is a substring of this string (argument[0]). The substring begins\r\n * at the specified begin (argument[1]) and extends to the character at index endIndex (argument[2]) - 1\r\n * (indexes are zero-based).\r\n */\r\nexport interface FstrSubstring extends FunctionCall<string> {\r\n  name: 'strSubstring';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns a new string that is a substring of this string (argument[0]). The substring begins\r\n * at the specified begin (arguments[1]) and extends to the last character of the string\r\n */\r\nexport interface FstrSubstringStart extends FunctionCall<string> {\r\n  name: 'strSubstringStart';\r\n  args: [\r\n    Expression<string>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the lower case version of the string\r\n */\r\nexport interface FstrToLowerCase extends FunctionCall<string> {\r\n  name: 'strToLowerCase';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the upper case version of the string\r\n */\r\nexport interface FstrToUpperCase extends FunctionCall<string> {\r\n  name: 'strToUpperCase';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns a copy of the string, with leading and trailing blank-space omitted\r\n */\r\nexport interface FstrTrim extends FunctionCall<string> {\r\n  name: 'strTrim';\r\n  args: [\r\n    Expression<string>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the result of substracting argument[1] from argument[0]\r\n */\r\nexport interface Fsub extends FunctionCall<number> {\r\n  name: 'sub';\r\n  args: [\r\n    Expression<number>,\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Returns the trigonometric tangent of angle expressed in radians\r\n */\r\nexport interface Ftan extends FunctionCall<number> {\r\n  name: 'tan';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Converts an angle expressed in radians into degrees\r\n */\r\nexport interface FtoDegrees extends FunctionCall<number> {\r\n  name: 'toDegrees';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Converts an unknown value into a number\r\n */\r\nexport interface FtoNumber extends FunctionCall<number> {\r\n  name: 'toNumber';\r\n  args: [\r\n    Expression<unknown>\r\n  ];\r\n};\r\n\r\n/**\r\n * Converts an angle expressed in radians into degrees\r\n */\r\nexport interface FtoRadians extends FunctionCall<number> {\r\n  name: 'toRadians';\r\n  args: [\r\n    Expression<number>\r\n  ];\r\n};\r\n\r\n/**\r\n * Converts an unknown value into a string\r\n */\r\nexport interface FtoString extends FunctionCall<string> {\r\n  name: 'strToString';\r\n  args: [\r\n    Expression<unknown>\r\n  ];\r\n};\r\n\r\nexport type FInterpolateTypeLinear = {\r\n  name: 'linear';\r\n};\r\n\r\nexport type FInterpolateType = FInterpolateTypeLinear;\r\n\r\nexport type FInterpolateParameter = {\r\n  stop: Expression<number>;\r\n  value: Expression<PropertyType>;\r\n};\r\n\r\n/**\r\n * Textual representation of a interpolate function.\r\n * argument[0] is the interpolation type.\r\n * argument[1] is the input value.\r\n * argument[2] - argument[args.length] are objects with 'stop' and 'value'.\r\n *\r\n * Will produce continuous results by interpolating between pairs\r\n * of FInterpolateParamters.\r\n */\r\nexport interface Finterpolate extends FunctionCall<number> {\r\n  name: 'interpolate';\r\n  args: [\r\n    FInterpolateType,\r\n    Expression<number>,\r\n    FInterpolateParameter,\r\n    FInterpolateParameter,\r\n    ...FInterpolateParameter[]\r\n  ];\r\n};\r\n"]}
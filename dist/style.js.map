{"version":3,"file":"style.js","sourceRoot":"","sources":["../style.ts"],"names":[],"mappings":"AAoCC,CAAC","sourcesContent":["import {\r\n  GeoStylerBooleanFunction,\r\n  GeoStylerFunction,\r\n  GeoStylerNumberFunction,\r\n  GeoStylerStringFunction\r\n} from './functions';\r\n\r\n/**\r\n * The special character to use to indicate a line break.\r\n */\r\nexport type newlineToken = '/n';\r\n\r\n/**\r\n * The ScaleDenominator defines a range of scales.\r\n */\r\nexport interface ScaleDenominator {\r\n  /**\r\n   * Minimum value of the ScaleDenominator. The value is inclusive.\r\n   *\r\n   */\r\n  min?: Expression<number>;\r\n  /**\r\n   * Maximum value of the ScaleDenominator. The value is exclusive.\r\n   */\r\n  max?: Expression<number>;\r\n}\r\n\r\n/**\r\n * Expression that evaluates to the result of a function\r\n * call on a list of argument expressions.\r\n */\r\nexport interface FunctionCall<T> {\r\n  name: T extends string ? GeoStylerStringFunction['name'] :\r\n    T extends number ? GeoStylerNumberFunction['name'] :\r\n    GeoStylerBooleanFunction['name'];\r\n  args: Expression<PropertyType>[];\r\n};\r\n\r\n/**\r\n * Expressions can be a literal value, a property name or a function call.\r\n */\r\nexport type Expression<T extends PropertyType> =\r\n  T extends string ? GeoStylerStringFunction | T :\r\n  T extends number ? GeoStylerNumberFunction | T :\r\n  T extends boolean ? GeoStylerBooleanFunction | T :\r\n  T;\r\n\r\n/**\r\n * The type of the Style.\r\n */\r\nexport type StyleType = 'Point' | 'Fill' | 'Line' | 'Raster';\r\n\r\n/**\r\n * A datatype of a property of the data.\r\n */\r\nexport type PropertyType = string | number | boolean | unknown;\r\n\r\n/**\r\n * The possible Operators used for comparison Filters.\r\n */\r\nexport type ComparisonOperator = '==' | '*=' | '!=' | '<' | '<=' | '>' | '>=' | '<=x<=';\r\n\r\n/**\r\n * The possible Operators used for combination Filters.\r\n */\r\nexport type CombinationOperator = '&&' | '||';\r\n\r\n/**\r\n * The Operator used for negation Filters.\r\n */\r\nexport type NegationOperator = '!';\r\n\r\n/**\r\n * All operators.\r\n */\r\nexport type Operator = ComparisonOperator | CombinationOperator | NegationOperator;\r\n\r\n/**\r\n * A Filter that checks if a property is in a range of two values (inclusive).\r\n */\r\nexport type RangeFilter = [\r\n  '<=x<=',\r\n  Expression<string>,\r\n  Expression<number>,\r\n  Expression<number>\r\n];\r\n\r\n/**\r\n * A ComparisonFilter compares two values.\r\n * If the first argument is a GeoStylerFunction it will be evaluated it.\r\n * If it is a string it will be treated as key of an object.\r\n */\r\nexport type ComparisonFilter = [\r\n  ComparisonOperator,\r\n  Expression<string | number | boolean | null>,\r\n  Expression<string | number | boolean | null>\r\n] | RangeFilter;\r\n\r\n/**\r\n * A CombinationFilter combines N Filters with a logical OR / AND operator.\r\n */\r\nexport type CombinationFilter = [\r\n  CombinationOperator,\r\n  ...Filter[]\r\n];\r\n\r\n/**\r\n * A NegationFilter negates a given Filter.\r\n */\r\nexport type NegationFilter = [\r\n  NegationOperator,\r\n  Filter\r\n];\r\n\r\nexport type Filter = ComparisonFilter | NegationFilter | CombinationFilter | Expression<boolean>;\r\n\r\n/**\r\n * The kind of the Symbolizer\r\n */\r\nexport type SymbolizerKind = 'Fill' | 'Icon' | 'Line' | 'Text' | 'Mark' | 'Raster';\r\n\r\n/**\r\n * A Symbolizer describes the style representation of geographical data.\r\n */\r\nexport interface BaseSymbolizer {\r\n  /**\r\n   * Describes the type of the kind of the Symbolizer.\r\n   */\r\n  kind: SymbolizerKind;\r\n  /**\r\n   * A color defined as a hex-color string.\r\n   */\r\n  color?: Expression<string>;\r\n  /**\r\n   * Determines the total opacity for the Symbolizer.\r\n   * A value between 0 and 1. 0 is none opaque and 1 is full opaque.\r\n   */\r\n  opacity?: Expression<number>;\r\n  /**\r\n   * Defines whether the Symbolizer should be visibile or not.\r\n   */\r\n  visibility?: Expression<boolean>;\r\n}\r\n\r\n/**\r\n * A PointSymbolizer describes the style representation of POINT data.\r\n */\r\nexport interface BasePointSymbolizer extends BaseSymbolizer {\r\n  /**\r\n   * This is a property relevant if using tiled datasets.\r\n   * If true, the symbols will not cross tile edges to avoid mutual collisions.\r\n   */\r\n  avoidEdges?: Expression<boolean>;\r\n  /**\r\n   * The offset of the Symbolizer as [x, y] coordinates. Positive values indicate\r\n   * right and down, while negative values indicate left and up.\r\n   */\r\n  offset?: [Expression<number>, Expression<number>];\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#paint-symbol-icon-translate-anchor\r\n   */\r\n  offsetAnchor?: Expression<'map' | 'viewport'>;\r\n}\r\n\r\n/**\r\n * Template literal to be more precise on what a font specification of a wellknownname can look like.\r\n * font-based symbols following Geotools/Geoserver syntax: ttf://<font name>#<hex code>\r\n */\r\nexport type FontSpec = `ttf://${string}#0x${string}`;\r\n\r\n/**\r\n * Supported WellKnownNames\r\n * Note that due to TypeScript limitations any string will be valid for this type; this will not change\r\n * until regexp or equivalent is supported, see:\r\n * https://github.com/microsoft/TypeScript/issues/6579\r\n *\r\n */\r\nexport type WellKnownName = 'circle' | 'square' | 'triangle' | 'diamond' | 'star' | 'cross' | 'x'\r\n| 'shape://vertline' | 'shape://horline' | 'shape://slash'\r\n| 'shape://backslash' | 'shape://dot' | 'shape://plus'\r\n| 'shape://times' | 'shape://oarrow' | 'shape://carrow'\r\n| FontSpec;\r\n\r\n/**\r\n * Unit that defines how to handle the corresponding symbolizer property.\r\n * Default should be pixel in your parser.\r\n * 'px' => pixel\r\n * 'm' => meter\r\n */\r\nexport type DistanceUnit = 'px' | 'm';\r\n\r\n/**\r\n * MarkSymbolizer describes the style representation of POINT data, if styled as\r\n * with a regular geometry.\r\n */\r\nexport interface MarkSymbolizer extends BasePointSymbolizer {\r\n  kind: 'Mark';\r\n  /**\r\n   * The WellKnownName of the MarkSymbolizer.\r\n   */\r\n  wellKnownName: WellKnownName;\r\n  /**\r\n   * The radius of the Symbolizer. Values describing the full size of the Symbolizer\r\n   * have to be divided by two (pixels if radiusUnit is not defined).\r\n   */\r\n  radius?: Expression<number>;\r\n  /**\r\n   * Unit to use for the radius.\r\n   */\r\n  radiusUnit?: DistanceUnit;\r\n  /**\r\n   * The rotation of the Symbolizer in degrees. Value should be between 0 and 360.\r\n   */\r\n  rotate?: Expression<number>;\r\n  /**\r\n   * The opacity of the fill. A value between 0 and 1.\r\n   * 0 is none opaque and 1 is full opaque.\r\n   */\r\n  fillOpacity?: Expression<number>;\r\n  /**\r\n   * The color of the stroke represented as a hex-color string.\r\n   */\r\n  strokeColor?: Expression<string>;\r\n  /**\r\n   * The opacity of the stroke. A value between 0 and 1.\r\n   * 0 is none opaque and 1 is full opaque.\r\n   */\r\n  strokeOpacity?: Expression<number>;\r\n  /**\r\n   * The width of the stroke (pixels if strokeWidthUnit is not defined).\r\n   */\r\n  strokeWidth?: Expression<number>;\r\n  /**\r\n   * Unit to use for the strokeWidth.\r\n   */\r\n  strokeWidthUnit?: DistanceUnit;\r\n  /**\r\n   * Amount to blur the Symbolizer. 1 blurs the Symbolizer such that only the\r\n   * centerpoint has full opacity. Mostly relevant for circles.\r\n   */\r\n  blur?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#paint-circle-circle-pitch-alignment\r\n   */\r\n  pitchAlignment?: Expression<'map' | 'viewport'>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#paint-circle-circle-pitch-scale\r\n   */\r\n  pitchScale?: Expression<'map' | 'viewport'>;\r\n}\r\n\r\n/**\r\n * The TextSymbolizer describes the style representation of point data, if styled\r\n * with a text.\r\n */\r\nexport interface TextSymbolizer extends BasePointSymbolizer {\r\n  kind: 'Text';\r\n  /**\r\n   * If true, the text will be visible even if it collides with other previously\r\n   * drawn symbols.\r\n   */\r\n  allowOverlap?: Expression<boolean>;\r\n  /**\r\n   * The anchor position of the label referred to the center of the geometry.\r\n   */\r\n  anchor?: Expression<\r\n    'center' | 'left' | 'right' | 'top' | 'bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\r\n  >;\r\n  /**\r\n   * Template string where {{PROPERTYNAME}} can be used to be replaced by values\r\n   * from the dataset.\r\n   * e.g.: \"Name {{country_name}}\"\r\n   */\r\n  label?: Expression<string>;\r\n  /**\r\n   * An Array of fonts. Comparable to https://www.w3schools.com/cssref/pr_font_font-family.asp\r\n   */\r\n  font?: Expression<string>[];\r\n  /**\r\n   * The halo's fadeout distance towards the outside.\r\n   */\r\n  haloBlur?: Expression<number>;\r\n  /**\r\n   * The color of the text's halo, which helps it stand out from backgrounds\r\n   * represented as a hex-color string.\r\n   */\r\n  haloColor?: Expression<string>;\r\n  /**\r\n   * Distance of halo to the font outline (pixels if haloWidthUnit is not defined).\r\n   */\r\n  haloWidth?: Expression<number>;\r\n  /**\r\n   * Unit to use for the haloWidth.\r\n   */\r\n  haloWidthUnit?: DistanceUnit;\r\n  /**\r\n   * The opacity of the halo. A value between 0 and 1.\r\n   * 0 means no opacity (i.e. transparent) and 1 is fully opaque.\r\n   */\r\n  haloOpacity?: Expression<number>;\r\n  /**\r\n   * Text justification option to align the text.\r\n   */\r\n  justify?: Expression<'left' | 'center' | 'right'>;\r\n  /**\r\n   * If true, the text will be kept upright.\r\n   */\r\n  keepUpright?: Expression<boolean>;\r\n  /**\r\n   * Sets the spacing between text characters (pixels if letterSpacingUnit is not defined).\r\n   */\r\n  letterSpacing?: Expression<number>;\r\n  /**\r\n   * Unit to use for the letterSpacing.\r\n   */\r\n  letterSpacingUnit?: DistanceUnit | 'em';\r\n  /**\r\n   * Sets the line height (pixels if lineHeightUnit is not defined).\r\n   * 'em' -> fontsize\r\n   */\r\n  lineHeight?: Expression<number>;\r\n  /**\r\n   * Unit to use for the lineHeight.\r\n   * 'em' -> fontsize\r\n   */\r\n  lineHeightUnit?: DistanceUnit | 'em';\r\n  /**\r\n   * Maximum angle change between adjacent characters in degrees.\r\n   */\r\n  maxAngle?: Expression<number>;\r\n  /**\r\n   * The maximum line width for text wrapping.\r\n   */\r\n  maxWidth?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * If true, icons will display without their corresponding text when the text\r\n   * collides with other symbols and the icon does not.\r\n   */\r\n  optional?: Expression<boolean>;\r\n  /**\r\n   * Size of the additional area around the text bounding box used for detecting\r\n   * symbol collisions.\r\n   */\r\n  padding?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-text-pitch-alignment\r\n   */\r\n  pitchAlignment?: Expression<'map' | 'viewport' | 'auto'>;\r\n  /**\r\n   * The rotation of the Symbolizer in degrees. Value should be between 0 and 360.\r\n   */\r\n  rotate?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-text-rotation-alignment\r\n   */\r\n  rotationAlignment?: Expression<'map' | 'viewport' | 'auto'>;\r\n  /**\r\n   * The fontsize in pixels.\r\n   */\r\n  size?: Expression<number>;\r\n  /**\r\n   * Specifies how to capitalize text, similar to the CSS text-transform property.\r\n   */\r\n  transform?: Expression<'none' | 'uppercase' | 'lowercase'>;\r\n  /**\r\n   * Specifies whether a font should be styled with a normal, italic, or oblique\r\n   * face from its font-family.\r\n   */\r\n  fontStyle?: Expression<'normal' | 'italic' | 'oblique'>;\r\n  /**\r\n   * Specifies the weight (or boldness) of the font. The weights available depend\r\n   * on the font-family you are using.\r\n   */\r\n  fontWeight?: Expression<'normal' | 'bold'>;\r\n  /**\r\n   * Specifies label placement relative to its geometry.\r\n   */\r\n  placement?: Expression<'point' | 'line' | 'line-center'>;\r\n}\r\n\r\n/**\r\n * Configuration for a sprite image.\r\n */\r\nexport type Sprite = {\r\n  /**\r\n   * A path/URL to the sprite image file.\r\n   */\r\n  source: Expression<string>;\r\n  /**\r\n   * The starting position of the sprite to cut out. Origing [0, 0] is top left in pixels.\r\n   */\r\n  position: [Expression<number>, Expression<number>];\r\n  /**\r\n   * The size of the sprite [width, height] in pixels.\r\n   */\r\n  size: [Expression<number>, Expression<number>];\r\n};\r\n\r\n/**\r\n * An IconSymbolizer describes the style representation of POINT data if styled\r\n * with a specific icon.\r\n */\r\nexport interface IconSymbolizer extends BasePointSymbolizer {\r\n  kind: 'Icon';\r\n  /**\r\n   * If true, the icon will be visible even if it collides with other previously\r\n   * drawn symbols.\r\n   */\r\n  allowOverlap?: Expression<boolean>;\r\n  /**\r\n   * Part of the icon placed closest to the anchor. This may conflict with a set\r\n   * offset.\r\n   */\r\n  anchor?: Expression<\r\n    'center' | 'left' | 'right' | 'top' | 'bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\r\n  >;\r\n  /**\r\n   * The halo's fadeout distance towards the outside.\r\n   */\r\n  haloBlur?: Expression<number>;\r\n  /**\r\n   * The color of the icons halo, which helps it stand out from backgrounds represented\r\n   * as a hex-color string.\r\n   */\r\n  haloColor?: Expression<string>;\r\n  /**\r\n   * Distance of halo to the icons outline (pixels if haloWidthUnit is not defined).\r\n   */\r\n  haloWidth?: Expression<number>;\r\n  /**\r\n   * Unit to use for the haloWidth.\r\n   */\r\n  haloWidthUnit?: DistanceUnit;\r\n  /**\r\n   * The opacity of the halo. A value between 0 and 1.\r\n   * 0 means no opacity (i.e. transparent)  and 1 is fully opaque.\r\n   */\r\n  haloOpacity?: Expression<number>;\r\n  /**\r\n   * A path/URL to the icon image file or a {@link Sprite} configuration.\r\n   */\r\n  image?: Expression<string> | Sprite;\r\n  /**\r\n   * An optional configuration for the image format as MIME type.\r\n   * This might be needed if the image(path) has no filending specified. e.g. http://myserver/getImage\r\n   */\r\n  format?: Expression<`image/${'png' | 'jpg' | 'jpeg' | 'gif' | 'svg+xml'}`>;\r\n  /**\r\n   * If true, the icon will be kept upright.\r\n   */\r\n  keepUpright?: Expression<boolean>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * If true, text will display without their corresponding icons when the icon\r\n   * collides with other symbols and the text does not.\r\n   */\r\n  optional?: Expression<boolean>;\r\n  /**\r\n   * Size of the additional area around the icon used for detecting symbol collisions.\r\n   */\r\n  padding?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-pitch-alignment\r\n   */\r\n  pitchAlignment?: Expression<'map' | 'viewport' | 'auto'>;\r\n  /**\r\n   * The rotation of the Symbolizer in degrees. Value should be between 0 and 360.\r\n   */\r\n  rotate?: Expression<number>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-rotation-alignment\r\n   */\r\n  rotationAlignment?: Expression<'map' | 'viewport' | 'auto'>;\r\n  /**\r\n   * The Symbolizer size (pixels if sizeUnit is not defined).\r\n   */\r\n  size?: Expression<number>;\r\n  /**\r\n   * Unit to use for the size.\r\n   */\r\n  sizeUnit?: DistanceUnit;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-text-fit\r\n   */\r\n  textFit?: Expression<'none' | 'width' | 'height' | 'both'>;\r\n  /**\r\n   * Property relevant for mapbox-styles.\r\n   * Compare https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-text-fit-padding\r\n   */\r\n  textFitPadding?: [Expression<number>, Expression<number>, Expression<number>, Expression<number>];\r\n}\r\n\r\n/**\r\n * A FillSymbolizer describes the style representation of POLYGON data.\r\n */\r\nexport interface FillSymbolizer extends BaseSymbolizer {\r\n  kind: 'Fill';\r\n  /**\r\n   * Whether the fill should be antialiased or not .\r\n   */\r\n  antialias?: Expression<boolean>;\r\n  /**\r\n   * The opacity of the fill. A value between 0 and 1.\r\n   * 0 is none opaque and 1 is full opaque.\r\n   */\r\n  fillOpacity?: Expression<number>;\r\n  /**\r\n   * The outline color as a hex-color string. Matches the value of fill-color if\r\n   * unspecified.\r\n   */\r\n  outlineColor?: Expression<string>;\r\n  /**\r\n   * The opacity of the outline. A value between 0 and 1.\r\n   * 0 is none opaque and 1 is full opaque.\r\n   */\r\n  outlineOpacity?: Expression<number>;\r\n  /**\r\n   * The outline width (pixels if outlineWidthUnit is not defined).\r\n   */\r\n  outlineWidth?: Expression<number>;\r\n  /**\r\n   * The Captype for the outLine.\r\n   */\r\n  outlineCap?: Expression<CapType>;\r\n  /**\r\n   * The JoinType for the outLine.\r\n   */\r\n  outlineJoin?: Expression<JoinType>;\r\n  /**\r\n   * Unit to use for the outlineWidth.\r\n   */\r\n  outlineWidthUnit?: DistanceUnit;\r\n  /**\r\n   * Encodes a dash pattern as an array of numbers. Odd-indexed numbers (first,\r\n   * third, etc) determine the length in pixels to draw the line, and even-indexed\r\n   * numbers (second, fourth, etc) determine the length in pixels to blank out\r\n   * the line. Default is an unbroken line.\r\n   */\r\n  outlineDasharray?: Expression<number>[];\r\n  /**\r\n   * Renders the fill of the polygon with a repeated pattern of PointSymbolizer.\r\n   */\r\n  graphicFill?: PointSymbolizer;\r\n  /**\r\n   * Size of the additional area around the repeated graphic fill symbolizer.\r\n   */\r\n  graphicFillPadding?: [Expression<number>, Expression<number>, Expression<number>, Expression<number>];\r\n}\r\n\r\n/**\r\n * The Types that are allowed in a graphic\r\n */\r\nexport type GraphicType = 'Mark' | 'Icon';\r\n\r\n/**\r\n * Determines how lines are rendered at their ends.\r\n * Possible values are butt (sharp square edge), round (rounded edge),\r\n * and square (slightly elongated square edge).\r\n */\r\nexport type CapType = 'butt' | 'round' | 'square';\r\n\r\n/**\r\n * Determines how lines are rendered at intersections of line segments.\r\n * Possible values are mitre (sharp corner),  round (rounded corner), and bevel\r\n * diagonal corner).\r\n */\r\nexport type JoinType = 'bevel' | 'round' | 'miter';\r\n\r\n/**\r\n * A LineSymbolizer describes the style representation of LINESTRING data.\r\n */\r\nexport interface LineSymbolizer extends BaseSymbolizer {\r\n  kind: 'Line';\r\n  blur?: Expression<number>;\r\n  /**\r\n   * The Captype for the LineSymbolizer.\r\n   */\r\n  cap?: Expression<CapType>;\r\n  /**\r\n   * Encodes a dash pattern as an array of numbers. Odd-indexed numbers (first,\r\n   * third, etc) determine the length in pixels to draw the line, and even-indexed\r\n   * numbers (second, fourth, etc) determine the length in pixels to blank out\r\n   * the line. Default is an unbroken line.\r\n   */\r\n  dasharray?: Expression<number>[];\r\n  /**\r\n   * Number of pixels into the dasharray to offset the drawing of the dash,\r\n   * used to shift the location of the lines and gaps in a dash.\r\n   */\r\n  dashOffset?: Expression<number>;\r\n  /**\r\n   * Draws a line casing outside of a line's actual path. Value indicates the\r\n   * width of the inner gap (pixels if gapWidthUnit is not defined).\r\n   */\r\n  gapWidth?: Expression<number>;\r\n  /**\r\n   * Unit to use for the gapWidth.\r\n   */\r\n  gapWidthUnit?: DistanceUnit;\r\n  /**\r\n   * Defines a gradient with which to color a line feature.\r\n   */\r\n  gradient?: any[];\r\n  /**\r\n   * Renders the line with a repeated linear PointSymbolizer.\r\n   */\r\n  graphicStroke?: PointSymbolizer;\r\n  /**\r\n   * Renders the pixels of the line with a repeated pattern.\r\n   */\r\n  graphicFill?: PointSymbolizer;\r\n  /**\r\n   * Size of the additional area around the repeated graphic fill symbolizer.\r\n   */\r\n  graphicFillPadding?: [Expression<number>, Expression<number>];\r\n  /**\r\n   * The JoinType for the LineSymbolizer.\r\n   */\r\n  join?: Expression<JoinType>;\r\n  /**\r\n   * Used to automatically convert miter joins to bevel joins for sharp angles.\r\n   */\r\n  miterLimit?: Expression<number>;\r\n  /**\r\n   * If present, it makes the renderer draw a line parallel to the original one,\r\n   * at the given distance. When applied on lines, positive values generate a\r\n   * parallel line on the left hand side, negative values on the right hand side.\r\n   */\r\n  perpendicularOffset?: Expression<number>;\r\n  /**\r\n   * Used to automatically convert round joins to miter joins for shallow angles.\r\n   */\r\n  roundLimit?: Expression<number>;\r\n  /**\r\n   * Distance between two symbol anchors (pixels if spacingUnit is not defined).\r\n   */\r\n  spacing?: Expression<number>;\r\n  /**\r\n   * Unit to use for the spacing.\r\n   * 'em' -> fontsize\r\n   */\r\n  spacingUnit?: DistanceUnit | 'em';\r\n  /**\r\n   * The width of the Line (pixels if widthUnit is not defined).\r\n   */\r\n  width?: Expression<number>;\r\n  /**\r\n   * Unit to use for the width.\r\n   */\r\n  widthUnit?: DistanceUnit;\r\n}\r\n\r\n/**\r\n * Operators used for Point symbolization.\r\n */\r\nexport type PointSymbolizer = IconSymbolizer | MarkSymbolizer | TextSymbolizer;\r\n\r\n/**\r\n * A single entry for the ColorMap.\r\n */\r\nexport interface ColorMapEntry {\r\n  color: Expression<string>;\r\n  quantity?: Expression<number>;\r\n  label?: Expression<string>;\r\n  opacity?: Expression<number>;\r\n}\r\n\r\n/**\r\n * The Types that are allowed in a ColorMap.\r\n */\r\nexport type ColorMapType = 'ramp' | 'intervals' | 'values';\r\n\r\n/**\r\n * A ColorMap defines the color values for the pixels of a raster image.\r\n */\r\nexport interface ColorMap {\r\n  type: Expression<ColorMapType>;\r\n  colorMapEntries?: ColorMapEntry[];\r\n  extended?: Expression<boolean>;\r\n}\r\n\r\n/**\r\n * A ContrastEnhancement defines how the contrast of image data should be enhanced.\r\n */\r\nexport interface ContrastEnhancement {\r\n  enhancementType?: Expression<'normalize' | 'histogram'>;\r\n  gammaValue?: Expression<number>;\r\n}\r\n\r\n/**\r\n * A Channel defines the properties for a color channel.\r\n */\r\nexport interface Channel {\r\n  sourceChannelName?: Expression<string>;\r\n  contrastEnhancement?: ContrastEnhancement;\r\n}\r\n\r\n/**\r\n * A RGBChannel defines how dataset bands are mapped to image color channels.\r\n */\r\nexport interface RGBChannel {\r\n  redChannel: Channel;\r\n  blueChannel: Channel;\r\n  greenChannel: Channel;\r\n}\r\n\r\n/**\r\n * A GrayChannel defines how a single dataset band is mapped to a grayscale channel.\r\n */\r\nexport interface GrayChannel {\r\n  grayChannel: Channel;\r\n}\r\n\r\nexport type ChannelSelection = RGBChannel | GrayChannel;\r\n\r\n/**\r\n * A RasterSymbolizer defines the style representation of RASTER data.\r\n */\r\nexport interface RasterSymbolizer {\r\n  kind: 'Raster';\r\n  /**\r\n   * Defines whether the Symbolizer should be visible or not.\r\n   */\r\n  visibility?: Expression<boolean>;\r\n  /**\r\n   * Determines the total opacity for the Symbolizer.\r\n   * A value between 0 and 1. 0 is none opaque and 1 is fully opaque.\r\n   */\r\n  opacity?: Expression<number>;\r\n  /**\r\n   * Defines the color values for the pixels of a raster image,\r\n   * as either color gradients, or a mapping of specific values to fixed colors.\r\n   */\r\n  colorMap?: ColorMap;\r\n  /**\r\n   * Specifies how dataset bands are mapped to image color channels.\r\n   */\r\n  channelSelection?: ChannelSelection;\r\n  /**\r\n   * Can be used to adjust the relative brightness of the image data.\r\n   */\r\n  contrastEnhancement?: ContrastEnhancement;\r\n  hueRotate?: Expression<number>;\r\n  brightnessMin?: Expression<number>;\r\n  brightnessMax?: Expression<number>;\r\n  saturation?: Expression<number>;\r\n  contrast?: Expression<number>;\r\n  resampling?: Expression<'linear' | 'nearest'>;\r\n  fadeDuration?: Expression<number>;\r\n}\r\n\r\n/**\r\n * All operators.\r\n */\r\nexport type Symbolizer = PointSymbolizer | LineSymbolizer | FillSymbolizer | RasterSymbolizer | TextSymbolizer;\r\n\r\n/**\r\n * A Rule combines a specific amount of data (defined by a Filter and a\r\n * ScaleDenominator) and an associated Symbolizer.\r\n */\r\nexport interface Rule {\r\n  name: string;\r\n  filter?: Filter;\r\n  scaleDenominator?: ScaleDenominator;\r\n  symbolizers: Symbolizer[];\r\n}\r\n\r\n/**\r\n * The Style is the main interface and the root for all other interfaces.\r\n */\r\nexport interface Style {\r\n  name: string;\r\n  rules: Rule[];\r\n  metadata?: {\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface for defining unsupported properties in the parsers.\r\n */\r\nexport interface UnsupportedProperties {\r\n  ScaleDenominator?: SupportDef;\r\n  Filter?: SupportDef | {\r\n    '&&'?: SupportDef;\r\n    '!'?: SupportDef;\r\n    '||'?: SupportDef;\r\n    '>'?: SupportDef;\r\n    '>='?: SupportDef;\r\n    '=='?: SupportDef;\r\n    '<'?: SupportDef;\r\n    '<='?: SupportDef;\r\n    '!='?: SupportDef;\r\n    '*='?: SupportDef;\r\n  };\r\n  Symbolizer?: SupportDef | {\r\n    LineSymbolizer?: SupportDef | {\r\n      [key in keyof Required<LineSymbolizer>]?: SupportDef\r\n    };\r\n    FillSymbolizer?: SupportDef | {\r\n      [key in keyof Required<FillSymbolizer>]?: SupportDef\r\n    };\r\n    MarkSymbolizer?: SupportDef | {\r\n      [key in keyof Required<MarkSymbolizer>]?: SupportDef\r\n    };\r\n    IconSymbolizer?: SupportDef | {\r\n      [key in keyof Required<IconSymbolizer>]?: SupportDef\r\n    };\r\n    TextSymbolizer?: SupportDef | {\r\n      [key in keyof Required<TextSymbolizer>]?: SupportDef\r\n    };\r\n    RasterSymbolizer?: SupportDef | {\r\n      [key in keyof Required<RasterSymbolizer>]?: SupportDef\r\n    };\r\n  };\r\n  Function?: SupportDef | {\r\n    [key in GeoStylerFunction['name']]?: SupportDef;\r\n  };\r\n}\r\n\r\n/**\r\n * Level of support for a functionality.\r\n */\r\nexport type SupportLevel = 'partial' | 'none';\r\n\r\n/**\r\n * Detailed information about the support of a functionality.\r\n * Can contain an info text.\r\n */\r\nexport type SupportInfo = {\r\n  support: SupportLevel;\r\n  info?: string;\r\n};\r\n\r\n/**\r\n * Defines in which way a functionality is supported.\r\n */\r\nexport type SupportDef = SupportInfo | SupportLevel;\r\n\r\n/**\r\n * The Result of the readStyle function of a StyleParser.\r\n */\r\nexport type ReadStyleResult = {\r\n  /**\r\n   * A list of warnings occured while reading the stlye.\r\n   */\r\n  warnings?: string[];\r\n  /**\r\n   * A list of unsupportedProperties used while reading the style.\r\n   */\r\n  unsupportedProperties?: UnsupportedProperties;\r\n  /**\r\n   * The geostyler-style as read by the parser.\r\n   */\r\n  output?: Style;\r\n  /**\r\n   * A list of errors occured while reading the style.\r\n   */\r\n  errors?: Error[];\r\n};\r\n\r\n/**\r\n * The Result of the writeStyle function of a StyleParser.\r\n */\r\nexport type WriteStyleResult<T = any> = {\r\n  /**\r\n   * A list of warnings occured while writing the style.\r\n   */\r\n  warnings?: string[];\r\n  /**\r\n   * A list of unsupportedProperties used while writing the style.\r\n   */\r\n  unsupportedProperties?: UnsupportedProperties;\r\n  /**\r\n   * The target-style as written by the parser.\r\n   */\r\n  output?: T;\r\n  /**\r\n   * A list of errors occured while writing the style.\r\n   */\r\n  errors?: Error[];\r\n};\r\n\r\n/**\r\n * Interface, which has to be implemented by all GeoStyler style parser classes.\r\n */\r\nexport interface StyleParser<T = any> {\r\n  /**\r\n   * The name of the Parser\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * Object specifying which properties are not or just partially supported.\r\n   */\r\n  unsupportedProperties?: UnsupportedProperties;\r\n\r\n  /**\r\n   * Parses the inputStyle and transforms it to the GeoStyler Style\r\n   *\r\n   * @param inputStyle\r\n   */\r\n  readStyle(inputStyle: T): Promise<ReadStyleResult>;\r\n\r\n  /**\r\n   * Reads the GeoStyler Style and transforms it to the target Style\r\n   * representation.\r\n   *\r\n   * @param geoStylerStyle Style\r\n   */\r\n  writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<T>>;\r\n\r\n  /**\r\n   * Parses an input Rule and transforms it to a GeoStyler Rule\r\n   *\r\n   * @param inputRule\r\n   */\r\n  readRule?(inputRule: any): Promise<Rule>;\r\n\r\n  /**\r\n   * Reads a GeoStyler Rule and transforms it to a target Rule\r\n   * representation.\r\n   *\r\n   * @param geoStylerRule Rule\r\n   */\r\n  writeRule?(geoStylerRule: Rule): Promise<any>;\r\n\r\n  /**\r\n   * Parses an input Filter and transforms it to a GeoStyler Filter\r\n   *\r\n   * @param inputFilter\r\n   */\r\n  readFilter?(inputFilter: any): Promise<Filter>;\r\n\r\n  /**\r\n   * Reads a GeoStyler Filter and transforms it to a target Filter\r\n   * representation.\r\n   *\r\n   * @param geoStylerFilter Filter\r\n   */\r\n  writeFilter?(geoStylerFilter: Filter): Promise<any>;\r\n\r\n  /**\r\n   * Parses an input ScaleDenominator and transforms it to a GeoStyler\r\n   * ScaleDenominator\r\n   *\r\n   * @param inputScaleDenominator\r\n   */\r\n  readScaleDenominator?(inputScaleDenominator: any): Promise<ScaleDenominator>;\r\n\r\n  /**\r\n   * Reads a GeoStyler ScaleDenominator and transforms it to a target\r\n   * ScaleDenominator representation\r\n   *\r\n   * @param geoStylerScaleDenominator ScaleDenominator\r\n   */\r\n  writeScaleDenominator?(geoStylerScaleDenominator: ScaleDenominator): Promise<any>;\r\n\r\n  /**\r\n   * Parses an input Symbolizer and transforms it to a GeoStyler Symbolizer\r\n   *\r\n   * @param inputSymbolizer\r\n   */\r\n  readSymbolizer?(inputSymbolizer: any): Promise<Symbolizer>;\r\n\r\n  /**\r\n   * Reads a GeoStyler Symbolizer and transforms it to a target Symbolizer\r\n   * representation\r\n   *\r\n   * @param geoStylerSymbolizer Symbolizer\r\n   */\r\n  writeSymbolizer?(geoStylerSymbolizer: Symbolizer): Promise<any>;\r\n}\r\n"]}